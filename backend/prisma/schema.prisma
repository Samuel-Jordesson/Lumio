generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @default(cuid())
  email                    String                    @unique
  username                 String                    @unique
  name                     String
  password                 String
  avatar                   String?
  bio                      String?
  pushSubscription         String?                   // JSON string da subscription
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  comments                 Comment[]
  conversationParticipants ConversationParticipant[]
  following                Follow[]                  @relation("UserFollowing")
  followers                Follow[]                  @relation("UserFollowers")
  likes                    Like[]
  receivedMessages         Message[]                 @relation("ReceivedMessages")
  sentMessages             Message[]                 @relation("SentMessages")
  posts                    Post[]
  notifications            Notification[]            @relation("UserNotifications")
  sentNotifications        Notification[]            @relation("NotificationSender")

  @@map("users")
}

model Post {
  id        String    @id @default(cuid())
  content   String
  images    String?
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Conversation {
  id           String                    @id @default(cuid())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  receiverId     String
  conversationId String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // 'like', 'follow', 'comment'
  userId    String   // Usuário que recebe a notificação
  senderId  String   // Usuário que fez a ação
  postId    String?  // ID do post (para curtidas e comentários)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  sender    User     @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
